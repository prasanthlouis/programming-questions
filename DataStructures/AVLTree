using System;

namespace AVLTree
{
    class Program
    {
        static void Main(string[] args)
        {
            var tree = new AvlTree();
            tree.root = tree.Insert(tree.root, 10);
            tree.root = tree.Insert(tree.root, 20);
            tree.root = tree.Insert(tree.root, 30);
            tree.root = tree.Insert(tree.root, 40);
            tree.root = tree.Insert(tree.root, 50);
            tree.root = tree.Insert(tree.root, 25);

            tree.PreOrder(tree.root);
        }
    }

    public class Node
    {
        public int Key { get; set; }
        public Node Left { get; set; }
        public Node Right { get; set; }
        public int Height { get; set; }
        public Node(int key)
        {
            Height = 1;
            Key = key;
        }
    }

    public class AvlTree
    {
        public Node root;

        public void PreOrder(Node node)
        {
            if (node != null)
            {
                Console.Write(node.Key + " ");
                PreOrder(node.Left);
                PreOrder(node.Right);
            }
        }

        internal Node Insert(Node node, int v)
        {
            if (node == null)
                return new Node(v);
            if(node.Key < v)
            {
                node.Right = Insert(node.Right, v);
            }
            else if(node.Key > v)
            {
                node.Left = Insert(node.Left, v);
            }
            else
            {
                return node;
            }

            node.Height = 1 + Math.Max(Height(node.Left), Height(node.Right));

            var balance = GetBalance(node);

            if (balance > 1 && v < node.Left.Key)
                return RotateRight(node);

            if (balance < -1 && node.Right.Key < v)
            {
                return RotateLeft(node);
            }

            if (balance > 1 && v > node.Left.Key)
            {
                node.Left = RotateLeft(node.Left);
                return RotateRight(node);
            }

            if (balance < -1 && node.Right.Key > v)
            {
                node.Right = RotateRight(node.Right);
                return RotateLeft(node);

            }

            return node;
        }

        private Node RotateRight(Node x)
        {
            var y = x.Left;
            var t2 = y.Right;
            y.Right = x;
            x.Left = t2;

            x.Height = 1 + Math.Max(Height(x.Left), Height(y.Right));
            y.Height = 1 + Math.Max(Height(y.Left), Height(y.Right));
            return y;
        }

        private Node RotateLeft(Node node)
        {
            var x = node.Right;
            var y = x.Left;
            x.Left = node;
            node.Right = y;

            node.Height = 1 + Math.Max(Height(node.Left), Height(node.Right));
            x.Height = 1 + Math.Max(Height(x.Left), Height(x.Right));
            return x;
        }

        private int GetBalance(Node node)
        {
            return Height(node.Left) - Height(node.Right);
        }

        private int Height(Node node)
        {
            if (node == null)
                return 0;
            return node.Height;
        }
    }
}
